name: Test Setup Action

# inputs:
#   username:
#     description: 'Docker username'
#     required: true
#   password:
#     description: 'Docker username'
#     required: true

runs:
  using: 'composite'
  steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Check docker.hub limit start
      env:
        USER: ${{ secrets.DOCKER_USERNAME }}
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: npm run docker:limit

    - name: npm Install
      run: npm install

    - name: Create image list
      run: npm test

    - name: Echo image-list hash
      env:
        test: 'this is a test'
        hash: ${{ hashFiles('./images/image-list.txt') }}
      run: |
          echo "$hash"
          echo "$test"

    - name: Check docker.hub limit after 'npm test'
      env:
        USER: ${{ secrets.DOCKER_USERNAME }}
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: npm run docker:limit

    - name: Restore Docker image cache
      id: docker-cache
      uses: actions/cache@v3
      with:
        path: /tmp/docker_cache
        key: docker-images-${{ hashFiles('./images/image-list.txt') }}
        restore-keys: |
          docker-images-

    - name: Decompress and load Docker images from cache
      if: ${{steps.docker-cache.outputs.cache-hit == 'true'}}
      run: |
        ls /tmp/docker_cache
        for tar_gz in /tmp/docker_cache/*.tar.gz; do
          gzip -dc "$tar_gz" | docker load
        done

    - name: Pull Docker images if cache is not hit
      if: ${{steps.docker-cache.outputs.cache-hit != 'true'}}
      run: |
        while IFS= read -r image; do
          docker pull "$image"
        done < image-list.txt

    - name: Check docker.hub limit after 'Pull Docker images if cache is not hit'
      env:
        USER: ${{ secrets.DOCKER_USERNAME }}
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: npm run docker:limit

