name: Daily Docker Cache

on:
  schedule:
    - cron: '0 19 * * 1-5' # Monday - Friday at 6:30 Arizona Time
  workflow_dispatch:

jobs:
  cache-docker-images:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 18.19.1

    # we login to docker to avoid docker pull limit rates
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Check docker.hub limit start of job
      env:
        USER: ${{ secrets.DOCKER_USERNAME }}
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: npm run docker:limit

    - name: npm Install
      run: npm install

    - name: Restore Docker image cache
      id: docker-cache
      uses: actions/cache@v4
      with:
        path: /tmp/docker_cache
        key: docker-images-12345
        lookup-only: true

    - name: Clear old docker cache
      if: ${{steps.docker-cache.outputs.cache-hit == 'true'}}
      run: |
        gh extension install actions/gh-actions-cache

        echo "Fetching list of cache key"
        cacheKeysForPR=$(gh actions-cache list -R $REPO -L 100 | cut -f 1 )

        ## Setting this to not fail the workflow while deleting cache keys.
        set +e
        echo "Deleting caches..."
        for cacheKey in $cacheKeysForPR
        do
            gh actions-cache delete docker-images-* -R $REPO --confirm
        done
        echo "Done"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: ${{ github.repository }}

    - name: Pull and save Docker images
      run: npm run save:image

    - name: Update Docker image cache
      uses: actions/cache@v4
      with:
        path: /tmp/docker_cache
        key: docker-images-12345

    - name: Check docker.hub limit end of job
      env:
        USER: ${{ secrets.DOCKER_USERNAME }}
        PASS: ${{ secrets.DOCKER_PASSWORD }}
      run: npm run docker:limit