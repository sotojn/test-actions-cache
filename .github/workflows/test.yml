name: CI Tests
# this will technically run again on merge to master, should limit it
on:
  pull_request:
    branches: [ main ]

jobs: 
    basic-test:
        runs-on: ubuntu-latest
        steps:
        - name: Check out code
          uses: actions/checkout@v4
    
        - name: Setup Node
          uses: actions/setup-node@v4
          with:
            node-version: 18.19.1
        
        # - name: Get node version
        #   id: node
        #   run: |
        #     echo "::set-output name=version::$(node -v)"

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Check docker.hub limit before
          env:
            USER: ${{ secrets.DOCKER_USERNAME }}
            PASS: ${{ secrets.DOCKER_PASSWORD }}
          run: npm run docker:limit
          
        - name: npm Install
          run: npm install

        - name: Test Docker Pull
          run: npm test

        - name: Restore Docker image cache
          id: docker-cache
          uses: actions/cache@v3
          with:
            path: /tmp/docker_cache
            key: docker-images-${{ hashFiles('./images/image-list.txt') }}
            restore-keys: |
              docker-images-
    
        - name: Pull and save Docker images
          if: ${{steps.docker-cache.outputs.cache-hit != 'true'}}
          # run: yarn saveDockerImages
          run: |
            mkdir -p /tmp/docker_cache
            while IFS= read -r image; do
              docker pull "$image"
              docker save "$image" | gzip > "/tmp/docker_cache/$(echo $image | tr '/:' '__').tar.gz"
            done < ./images/image-list.txt
    
        - name: Update Docker image cache
          if: ${{steps.docker-cache.outputs.cache-hit != 'true'}}
          uses: actions/cache@v3
          with:
            path: /tmp/docker_cache
            key: docker-images-${{ hashFiles('./images/image-list.txt') }}

        - name: Pull some images
          run: npm run pull

        - name: Check docker.hub limit after
          env:
            USER: ${{ secrets.DOCKER_USERNAME }}
            PASS: ${{ secrets.DOCKER_PASSWORD }}
          run: npm run docker:limit